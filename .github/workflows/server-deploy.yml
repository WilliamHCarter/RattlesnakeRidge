name: Deploy Server to AWS

on:
  push:
    branches: ['main']
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR Public
      id: login-ecr
      run: |
        echo ${{ secrets.AWS_SECRET_ACCESS_KEY }} | aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}

    - name: Build, tag, and push Docker image to Amazon ECR Public
      env:
        ECR_REGISTRY: ${{ secrets.ECR_URI }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Update Docker container on EC2 instance
      env:
        CONTAINER_NAME: Ridge-Cluster-Instance
        ECR_REGISTRY: ${{ secrets.ECR_URI }}
        ECR_REPOSITORY: rattlesnakeridge-dockerized
        IMAGE_TAG: latest
      run: |
        aws ssm send-command --instance-ids ${{secrets.AWS_INSTANCE_ID}} --document-name "AWS-RunShellScript" --parameters '{"commands":["docker stop $(docker ps -aq --filter name=${{ env.CONTAINER_NAME }})", "docker rm $(docker ps -aq --filter name=${{ env.CONTAINER_NAME }})", "docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}", "docker run -d --name ${{ env.CONTAINER_NAME }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"]}'

    - name: Cleanup old images from ECR
      run: |
        aws ecr list-images --repository-name ${{ secrets.ECR_REPOSITORY }} --query 'imageIds[?imageTag!=`latest`]' --output json | jq -r '.[] | .imageDigest' | xargs -I {} aws ecr batch-delete-image --repository-name ${{ secrets.ECR_REPOSITORY }} --image-ids imageDigest={}

    - name: Start new task using 'deploy-to-ec2' task definition
      run: |
        aws ecs run-task \
          --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
          --task-definition deploy-to-ec2 \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-004e3107c72259935,subnet-08b8dc37f67e6b7b2,subnet-0ba778596923cd4a0,subnet-0aa9c47c1ed1de680,subnet-0268b25efb40a90c4,subnet-0f38b5aea0453e0a3],securityGroups=[sg-068a4ceac39a4a38b,sg-035b2857ef489efb9]}"
