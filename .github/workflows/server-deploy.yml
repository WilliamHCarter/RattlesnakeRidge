name: Deploy Server to AWS

on:
  push:
    branches: ['main']
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        run: |
          echo ${{ secrets.AWS_SECRET_ACCESS_KEY }} | aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}

     - name: Obtain SSL/TLS Certificate
        run: |
          certbot --nginx -d api.stories.williamcarter.dev
          nginx -s reload
        env:
          TERM: xterm 

      - name: Build, tag, and push Docker image to Amazon ECR Public
        run: |
          IMAGE_TAG="latest"
          IMAGE_URI="${{ secrets.ECR_URI }}/${{ secrets.ECR_REPO_NAME }}:$IMAGE_TAG"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
      
      - name: Cleanup old images from ECR
        run: |
          aws ecr list-images --repository-name ${{ secrets.ECR_REPOSITORY }} --query 'imageIds[?imageTag!=`latest`]' --output json | jq -r '.[] | .imageDigest' | xargs -I {} aws ecr batch-delete-image --repository-name ${{ secrets.ECR_REPOSITORY }} --image-ids imageDigest={}

      - name: Start new task using 'deploy-to-ec2' task definition
        run: |
          aws ecs run-task \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --task-definition deploy-to-ec2 \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-004e3107c72259935,subnet-08b8dc37f67e6b7b2,subnet-0ba778596923cd4a0,subnet-0aa9c47c1ed1de680,subnet-0268b25efb40a90c4,subnet-0f38b5aea0453e0a3],securityGroups=[sg-068a4ceac39a4a38b,sg-035b2857ef489efb9]}"